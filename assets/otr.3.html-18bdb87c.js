import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as r,a as n,b as s,d as a,w as l,e as t}from"./app-374e02bf.js";const u={},d=t('<h1 id="otr-3-mutators" tabindex="-1"><a class="header-anchor" href="#otr-3-mutators" aria-hidden="true">#</a> otr.3 Mutators</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>此文档将一步步引导你开发一个简单的Mutators，带您理解Mutators的基本构造</p><h2 id="_1-0-环境配置" tabindex="-1"><a class="header-anchor" href="#_1-0-环境配置" aria-hidden="true">#</a> -1.0 环境配置</h2><p><strong>此处不再详细说明，如果你有看过相关编程语言的教程，对下面的事情你应该会很快上手</strong></p><p><strong>详情请参考官方文档</strong></p>',6),k={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},m=n("img",{src:"https://img.shields.io/badge/VS Code-Install-blue?style=for-the-badge&logo=visualstudiocode",alt:"Install in VS Code",title:"Install in VS Code"},null,-1),v={href:"https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans",target:"_blank",rel:"noopener noreferrer"},b=n("img",{src:"https://img.shields.io/badge/VS Code-Install-blue?style=for-the-badge&logo=visualstudiocode",alt:"Install in VS Code",title:"Install in VS Code"},null,-1),h={href:"https://marketplace.visualstudio.com/items?itemName=sumneko.lua",target:"_blank",rel:"noopener noreferrer"},y=n("img",{src:"https://img.shields.io/badge/VS Code-Install-blue?style=for-the-badge&logo=visualstudiocode",alt:"Install in VS Code",title:"Install in VS Code"},null,-1),f={href:"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp",target:"_blank",rel:"noopener noreferrer"},g=n("img",{src:"https://img.shields.io/badge/VS Code-Install-blue?style=for-the-badge&logo=visualstudiocode",alt:"Install in VS Code",title:"Install in VS Code"},null,-1),_=n("li",null,[n("p",null,"配置工作区的.vscode\\settings.json为：")],-1),w=t(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token comment">//配置文件扩展名关联</span>
    <span class="token property">&quot;files.associations&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;*.txt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lua&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token comment">//隐藏meta文件</span>
    <span class="token property">&quot;files.exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;**/*.meta&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>配置VSCode为Unity的外部编辑器</li></ol><h2 id="_0-0-想" tabindex="-1"><a class="header-anchor" href="#_0-0-想" aria-hidden="true">#</a> 0.0 想！</h2><p>现在我们先想一下我们的Mutators有什么功能</p><p>例如我们本次的示例Mutators简单血量回复，他应该有：</p><ul><li>基本的血量回复，每次修复35%（可修改）</li><li>有冷却时间（可修改，最低为60s）</li><li>防止血量回复后健康超过最大值</li><li>（次要）加入UI，显示修复状态与健康</li></ul><p>然后我们再简单想一下脚本的运行逻辑与可以供玩家在游戏中调整的数值，方便实际敲代码(可以跳过)</p><p>在本实例中，公开的可以供玩家在游戏中调整的数值：血量回复比例、冷却时间、键位</p><p>现在我们可以正式开始了!</p><h2 id="_1-0-unity内简单配置" tabindex="-1"><a class="header-anchor" href="#_1-0-unity内简单配置" aria-hidden="true">#</a> 1.0 Unity内简单配置</h2><p>在打代码之前，我们先在Unity配置一下Mutators的预制件的Mod导出设置</p>`,11),q=n("p",null,"新建一个右键新建一个Ravenscrpit文件，把这个文件拖入组件内的source，Behaviour处填写TXT的文件名：",-1),C=n("p",null,"{缺图}",-1),S=n("p",null,"{缺图}",-1),x=n("h2",{id:"_1-1-完成主要功能",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1-完成主要功能","aria-hidden":"true"},"#"),s(" 1.1 完成主要功能")],-1),I={href:"http://ravenfieldgame.com/ravenscript/api.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.runoob.com/csharp/csharp-class.html",target:"_blank",rel:"noopener noreferrer"},T={href:"http://ravenfieldgame.com/ravenscript/api/Player.html",target:"_blank",rel:"noopener noreferrer"},P={href:"http://ravenfieldgame.com/ravenscript/api/Actor.html",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>官方并没有标注这些内容，这需要您按照逻辑思维与常识自行探索</p><p>其次你需要明白如何为脚本对应找到合适的Api:</p><p>提取功能中的关键字，如“载具” &gt; Vehicle</p><p>然后到文档的Api索引查找相关方法、member，如我们可以在Player这个类中找到可以获取玩家活动载具的menber是Player.Actor.activeVehicle，我们就可以在</p><p>如果找不到合适的方法，可以尝试关键词搜索，如果还找不到。那就是乌鸦没写估计，只能另辟蹊径</p><p>然后按文档提供的member和method编写脚本，不断重复这个行为</p><p>首先，我们先实现我们最核心的功能血量回复：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">behaviour</span><span class="token punctuation">(</span><span class="token string">&quot;QuickTreat&quot;</span><span class="token punctuation">)</span>  <span class="token comment">--注册Ravenscript行为，然后我们才能从这个基类派生自己的自定义类</span>

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>P<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token comment">--当按下P键时...</span>
        Player<span class="token punctuation">.</span>actor<span class="token punctuation">.</span><span class="token function">ResupplyHealth</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">--调用Player的成员actor内的一个成员方法来回复50血量</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后实际测试，发现没有Bug，同时发现使用Player.actor.ResupplyHealth()这个方法可以确保防止血量回复后健康超过最大值，这意味着我们可以减少实现这个功能的代码量</p><p>然后继续添加下一个功能冷却时间：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">behaviour</span><span class="token punctuation">(</span><span class="token string">&quot;QuickTreat&quot;</span><span class="token punctuation">)</span>

<span class="token comment">--初始化局部变量变量</span>
<span class="token keyword">local</span> timer <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    timer <span class="token operator">=</span> Time<span class="token punctuation">.</span>deltaTime <span class="token operator">+</span> timer  <span class="token comment">--计时器，会不断累加一帧的时间</span>
    <span class="token keyword">if</span> Input<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>P<span class="token punctuation">)</span> <span class="token keyword">then</span>
	    <span class="token keyword">if</span> timer <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token keyword">then</span>
            Player<span class="token punctuation">.</span>actor<span class="token punctuation">.</span><span class="token function">ResupplyHealth</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
			timer <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">--重置计时器</span>
		<span class="token keyword">end</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后实际测试，发现没有Bug，然后继续添加下一个功能，不断重复这个过程，直到完成：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">behaviour</span><span class="token punctuation">(</span><span class="token string">&quot;QuickTreat&quot;</span><span class="token punctuation">)</span>  <span class="token comment">--注册Ravenscript行为，然后我们才能从这个基类派生自己的自定义类</span>

<span class="token comment">--初始化局部变量变量</span>
<span class="token keyword">local</span> timer <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">local</span> cooldown  <span class="token comment">--冷却时间</span>
<span class="token keyword">local</span> bits <span class="token comment">--血量回复比</span>
<span class="token keyword">local</span> keybind <span class="token comment">--触发键位</span>
<span class="token keyword">local</span> mutator

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--进入游戏地图的一开始时运行</span>
    coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token function">WaitForSeconds</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">--延迟运行下一行确保mutators设置加载成功</span>
    mutator <span class="token operator">=</span> ScriptedBehaviour<span class="token punctuation">.</span>mutator  <span class="token comment">--获取此脚本绑定的mutator信息</span>
	cooldown <span class="token operator">=</span> mutator<span class="token punctuation">.</span><span class="token function">GetConfigurationFloat</span><span class="token punctuation">(</span><span class="token string">&quot;cooldown&quot;</span><span class="token punctuation">)</span>  <span class="token comment">--获取mutator自定义选项卡中id为cooldown的float对应的值</span>
	<span class="token keyword">if</span> cooldown <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token keyword">then</span>  <span class="token comment">--如果cooldown小于60，则重置cooldown为60</span>
	    cooldown <span class="token operator">=</span> <span class="token number">60</span>
    <span class="token keyword">end</span>
	bits <span class="token operator">=</span> mutator<span class="token punctuation">.</span><span class="token function">GetConfigurationRange</span><span class="token punctuation">(</span><span class="token string">&quot;bits&quot;</span><span class="token punctuation">)</span>  <span class="token comment">--获取mutator自定义选项卡中id为bits的range对应的值</span>
	keybind <span class="token operator">=</span> mutator<span class="token punctuation">.</span><span class="token function">GetConfigurationString</span><span class="token punctuation">(</span><span class="token string">&quot;keybind&quot;</span><span class="token punctuation">)</span>  <span class="token comment">--获取mutator自定义选项卡中id为keybind的string对应的值</span>
	<span class="token keyword">if</span> keybind <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token keyword">then</span>  <span class="token comment">--如果keybind为空，则重置keybind为&quot;p&quot;</span>
	    keybind <span class="token operator">=</span> <span class="token string">&quot;P&quot;</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--在游戏的每帧时运行</span>
    timer <span class="token operator">=</span> Time<span class="token punctuation">.</span>deltaTime <span class="token operator">+</span> timer  <span class="token comment">--计时器，会不断累加一帧的时间</span>
    <span class="token keyword">if</span> Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>keybind<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token comment">--当按下可以keybind对应的键位时...</span>
	    <span class="token keyword">if</span> timer <span class="token operator">&gt;=</span> cooldown <span class="token keyword">then</span> <span class="token comment">--当计时器超出冷却时间时...</span>
            Player<span class="token punctuation">.</span>actor<span class="token punctuation">.</span><span class="token function">ResupplyHealth</span><span class="token punctuation">(</span>Player<span class="token punctuation">.</span>actor<span class="token punctuation">.</span>maxHealth <span class="token operator">*</span> bits<span class="token punctuation">)</span> <span class="token comment">--调用Player的成员actor内的一个成员方法来回复最大血量的%bits</span>
			timer <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">--重置计时器</span>
		<span class="token keyword">end</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当主要功能完成时，我们就可以继续下一步：添加次要功能</p><h2 id="_1-2-添加次要功能" tabindex="-1"><a class="header-anchor" href="#_1-2-添加次要功能" aria-hidden="true">#</a> 1.2 添加次要功能</h2>`,15);function R(B,Q){const e=p("ExternalLinkIcon"),o=p("RouterLink");return c(),r("div",null,[d,n("ol",null,[n("li",null,[n("p",null,[s("安装 "),n("a",k,[m,a(e)])])]),n("li",null,[n("p",null,[s("安装Chinese-Simple语言扩展包"),n("a",v,[b,a(e)])])]),n("li",null,[n("p",null,[s("安装vscode-lua扩展"),n("a",h,[y,a(e)])])]),n("li",null,[n("p",null,[s("安装C#扩展"),n("a",f,[g,a(e)])])]),_]),w,n("p",null,[s("场景内新建一个空物体，添加"),a(o,{to:"/cn/Components/ScriptedBehaviour.html"},{default:l(()=>[s("ScriptedBehaviour")]),_:1}),s("组件，游戏中这个物体下的所有东西都会被实例化")]),q,C,n("p",null,[s("预制件化这个物体，在"),a(o,{to:"/cn/Components/MutatorCotentMod.html"},{default:l(()=>[s("MutatorCotentMod")]),_:1}),s("配置这个Mutator，这里配置了float、range、string各一个：")]),S,x,n("p",null,[s("打开官方的"),n("a",I,[s("Ravenscrpit的文档"),a(e)])]),n("p",null,[s("首先你需要明白文档中那些classes可以"),n("a",V,[s("“直接调用”"),a(e)])]),n("p",null,[s("即哪些类已经实例化可以直接作为对象进行调用（如"),n("a",T,[s("类Player"),a(e)]),s("），哪些是作为“数据类型”，需要先实例化才能使用（如"),n("a",P,[s("类Actor"),a(e)]),s("，它需要先在一个Bot的GameObject上调用GetComponentInParent<Actor>，“get”了这个类才能使用 ）")]),M])}const U=i(u,[["render",R],["__file","otr.3.html.vue"]]);export{U as default};
