import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as u,o as r,c as i,a as t,b as l,d as n,w as o,e as a}from"./app-6e7f78a1.js";const s={},c=a('<h1 id="vehicle" tabindex="-1"><a class="header-anchor" href="#vehicle" aria-hidden="true">#</a> Vehicle</h1><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>The base class of a carrier, the foundation for building a carrier</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Add to the topmost level of a carrier object, with attached objects hanging down inside this object</p>',5),h=t("h2",{id:"comment",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#comment","aria-hidden":"true"},"#"),l(" Comment")],-1),_=t("h2",{id:"variables",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#variables","aria-hidden":"true"},"#"),l(" Variables")],-1),m=t("thead",null,[t("tr",null,[t("th",null,"Name"),t("th",null,"Type"),t("th",null,"Description")])],-1),p=t("tr",null,[t("td",null,"aiType"),t("td",null,"enum"),t("td",null,"Type of vehicle use as determined by bot (Capture=capture position, Roam=move, Transport=transport)")],-1),f=t("tr",null,[t("td",null,"armorRating"),t("td",null,"enum"),t("td",null,"Armor strength (SmallArms=light weapons, HeavyArms=heavy weapons, AntiTank=armor piercing)")],-1),b=t("tr",null,[t("td",null,"aiUseStrategy"),t("td",null,"enum"),t("td",null,"Carrier use scenarios identified by bot (Default, OnlyFromFrontlineSpawn, FromAnySpawn)")],-1),g=t("tr",null,[t("td",null,"name"),t("td",null,"string"),t("td",null,"vehicle name")],-1),A=t("td",null,"seats",-1),y=t("td",null,"Seats (first seat will be set as driver's seat)",-1),S=t("tr",null,[t("td",null,"targetType"),t("td",null,"enum.Actor.TargetType"),t("td",null,"Target Type (the vehicle's own Type. Infantry=Infantry, InfantryGroup=Infantry Group, Unarmored=Unarmored, Armored=Armored, Air=Airborne, AirFastMover=High-speed airborne target)")],-1),v=t("tr",null,[t("td",null,"armorDamagedBy"),t("td",null,"enum.ArmorRating"),t("td",null,"What type of weapon the carrier can be attacked by (SmallArms=light weapons, HeavyArms=heavy weapons, AntiTank=armor piercing)")],-1),C=t("tr",null,[t("td",null,"smallArmsMultiplier"),t("td",null,"float"),t("td",null,"Light weapon damage multiplier")],-1),w=t("tr",null,[t("td",null,"heavyArmsMultiplier"),t("td",null,"float"),t("td",null,"Heavy weapon damage multiplier")],-1),T=t("tr",null,[t("td",null,"canBeRepairedAfterDeath"),t("td",null,"bool"),t("td",null,"Repairable on death")],-1),k=t("tr",null,[t("td",null,"maxHealth"),t("td",null,"float"),t("td",null,"Maximum health value")],-1),x=t("tr",null,[t("td",null,"crashDamageSpeedThrehshold"),t("td",null,"float"),t("td",null,"Threshold for the speed at which impacts cause damage")],-1),D=t("tr",null,[t("td",null,"crashDamageMultiplier"),t("td",null,"float"),t("td",null,"impact damage")],-1),P=t("tr",null,[t("td",null,"spotChanceMultiplier"),t("td",null,"float"),t("td",null,"Visibility multiplier")],-1),V=t("tr",null,[t("td",null,"burnTime"),t("td",null,"float"),t("td",null,"burn time")],-1),R=t("tr",null,[t("td",null,"crashSkipsBurn"),t("td",null,"bool"),t("td",null,"Crash and burn")],-1),I=t("tr",null,[t("td",null,"directJavelinPath"),t("td",null,"bool"),t("td",null,"Whether to guide the missile lock (without checking the box, it defaults to the origin, I think)")],-1),M=t("tr",null,[t("td",null,"canCapturePoints"),t("td",null,"bool"),t("td",null,"can occupiable captrue points")],-1),O=t("tr",null,[t("td",null,"canFireAtOwnVehicle"),t("td",null,"bool"),t("td",null,"Can damage the vehicle itself")],-1),j=t("tr",null,[t("td",null,"targetLockPoint"),t("td",null,"Transform"),t("td",null,"Missile lock point (guided missile lock must be enabled first)")],-1),F=t("tr",null,[t("td",null,"aiUseToDefendPoint"),t("td",null,"bool"),t("td",null,"Whether or not a bot can use a carrier to defend a stronghold")],-1),G=t("tr",null,[t("td",null,"minCrewCount"),t("td",null,"int"),t("td",null,"bot minimum occupancy (applicable to transport carriers)")],-1),B=t("tr",null,[t("td",null,"roamCompleteDistance"),t("td",null,"float"),t("td")],-1),z=t("tr",null,[t("td",null,"smokeParticles"),t("td",null,"ParticleSystem"),t("td",null,"fuming particle")],-1),L=t("tr",null,[t("td",null,"fireParticles"),t("td",null,"ParticleSystem"),t("td",null,"Ignition particle")],-1),H=t("tr",null,[t("td",null,"fireAlarmSound"),t("td",null,"AudioSource"),t("td",null,"flame warning")],-1),N=t("tr",null,[t("td",null,"deathParticles"),t("td",null,"ParticleSystem"),t("td",null,"death particle")],-1),U=t("tr",null,[t("td",null,"deathSound"),t("td",null,"AudioSource"),t("td",null,"Death sound effects")],-1),W=t("tr",null,[t("td",null,"impactAudio"),t("td",null,"AudioSource"),t("td",null,"Impact sound effects")],-1),q=t("tr",null,[t("td",null,"heavyDamageAudio"),t("td",null,"AudioSource"),t("td",null,"Sound effects when smoking")],-1),E=t("tr",null,[t("td",null,"blockSensor"),t("td",null,"Transform"),t("td")],-1),J=t("tr",null,[t("td",null,"blip"),t("td",null,"Texture"),t("td",null,"vehicle icons on the mini-map")],-1),K=t("tr",null,[t("td",null,"blipScale"),t("td",null,"float"),t("td",null,"Display size multiplier for vehicle icons on the mini-map")],-1),Q=t("tr",null,[t("td",null,"avoidanceSize"),t("td",null,"Vector2"),t("td",null,"Carrier generation avoidance size (the size of the volume that the AI considers in the patrolling system)")],-1),X=t("tr",null,[t("td",null,"pathingRadius"),t("td",null,"float"),t("td",null,"Minimum distance for bot to enter carrier")],-1),Y=t("tr",null,[t("td",null,"ramSize"),t("td",null,"Vector3"),t("td",null,"Impact area resizing")],-1),Z=t("tr",null,[t("td",null,"ramOffset"),t("td",null,"Vector3"),t("td",null,"Impact area repositioning")],-1),$=t("tr",null,[t("td",null,"disableOnDeath"),t("td",null,"GameObject[]"),t("td",null,"Objects hidden at the time of death")],-1),tt=t("tr",null,[t("td",null,"activateOnDeath"),t("td",null,"GameObject[]"),t("td",null,"Objects displayed (enabled) on death")],-1),lt=t("tr",null,[t("td",null,"teamColorMaterials"),t("td",null,"MaterialTarget[]"),t("td",null,"Camp color material (requires a material slot to be pre-assigned in Blender for displaying the material color)")],-1),et=t("tr",null,[t("td",null,"hasCountermeasures"),t("td",null,"bool"),t("td",null,"Whether or not to enable countermeasures")],-1),nt=t("tr",null,[t("td",null,"countermeasuresActiveTime"),t("td",null,"float"),t("td",null,"Duration of countermeasures")],-1),ot=t("tr",null,[t("td",null,"countermeasuresCooldown"),t("td",null,"float"),t("td",null,"countermeasures cooldown time")],-1),dt=t("tr",null,[t("td",null,"countermeasureParticles"),t("td",null,"ParticleSystem"),t("td",null,"countermeasure particle")],-1),ut=t("tr",null,[t("td",null,"countermeasureSpawnPrefab"),t("td",null,"GameObject"),t("td",null,"countermeasure generation prefab")],-1),rt=t("tr",null,[t("td",null,"countermeasureAudio"),t("td",null,"AudioSource"),t("td",null,"countermeasure sound effect")],-1),it=t("tr",null,[t("td",null,"controlAudio"),t("td",null,"bool"),t("td",null,"Control audio (engine sounds)")],-1),at=t("tr",null,[t("td",null,"powerGainSpeed"),t("td",null,"float"),t("td",null,"Audio loudness boost speed (not quite sure if it is)")],-1),st=t("tr",null,[t("td",null,"pitchGainSpeed"),t("td",null,"float"),t("td",null,"Audio frequency boost speed")],-1),ct=t("tr",null,[t("td",null,"throttleGainSpeed"),t("td",null,"float"),t("td",null,"Carrier Throttle Lift Speed")],-1),ht=t("tr",null,[t("td",null,"throttleAudioSource"),t("td",null,"AudioSource"),t("td")],-1),_t=t("tr",null,[t("td",null,"extraAudioSource"),t("td",null,"AudioSource"),t("td")],-1),mt=t("tr",null,[t("td",null,"shiftForwardClip"),t("td",null,"AudioClip"),t("td")],-1),pt=t("tr",null,[t("td",null,"shiftReverseClip"),t("td",null,"AudioClip"),t("td")],-1),ft=t("tr",null,[t("td",null,"ignitionClip"),t("td",null,"AudioClip"),t("td",null,"Startup Sound")],-1),bt=t("tr",null,[t("td",null,"shiftForwardClip"),t("td",null,"AudioClip"),t("td")],-1),gt=t("tr",null,[t("td",null,"shiftReverseClip"),t("td",null,"AudioClip"),t("td")],-1),At=t("tr",null,[t("td",null,"ignitionClip"),t("td",null,"AudioClip"),t("td")],-1);function yt(St,vt){const e=u("RouterLink");return r(),i("div",null,[c,t("p",null,[l("Refer "),n(e,{to:"/cn/Tutorials/"},{default:o(()=>[l("RFCreator Project")]),_:1})]),h,_,t("table",null,[m,t("tbody",null,[p,f,b,g,t("tr",null,[A,t("td",null,[l("List<"),n(e,{to:"/en/Components/Seat.html"},{default:o(()=>[l("Seat")]),_:1}),l(">")]),y]),S,v,C,w,T,k,x,D,P,V,R,I,M,O,j,F,G,B,z,L,H,N,U,W,q,E,J,K,Q,X,Y,Z,$,tt,lt,et,nt,ot,dt,ut,rt,it,at,st,ct,ht,_t,mt,pt,ft,bt,gt,At])])])}const Tt=d(s,[["render",yt],["__file","Vehicle.html.vue"]]);export{Tt as default};
