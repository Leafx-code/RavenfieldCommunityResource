import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as u,a as s,b as n,d as a,w as o,e}from"./app-bb4167df.js";const r={},k=e('<h1 id="rvs-2-mutators" tabindex="-1"><a class="header-anchor" href="#rvs-2-mutators" aria-hidden="true">#</a> rvs.2 Mutators</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>此文档将一步步引导你开发一个简单的Mutators，带您理解Mutators的基本构造</p><h2 id="_0-0-想" tabindex="-1"><a class="header-anchor" href="#_0-0-想" aria-hidden="true">#</a> 0.0 想！</h2><p>现在我们先想一下我们的Mutators有什么功能</p><p>例如我们本次的示例Mutators简单血量回复，他应该有：</p><ul><li>基本的血量回复，每次修复35%（可修改）</li><li>有冷却时间（可修改，最低为60s）</li><li>防止血量回复后健康超过最大值</li><li>（次要）加入UI，显示修复状态与健康</li></ul><p>然后我们再简单想一下脚本的运行逻辑与可以供玩家在游戏中调整的数值，方便实际敲代码(可以跳过)</p><p>在本实例中，公开的可以供玩家在游戏中调整的数值：血量回复比例、冷却时间、键位</p><p>现在我们可以正式开始了!</p><h2 id="_1-0-unity内简单配置" tabindex="-1"><a class="header-anchor" href="#_1-0-unity内简单配置" aria-hidden="true">#</a> 1.0 Unity内简单配置</h2><p>在打代码之前，我们先在Unity配置一下Mutators的预制件的Mod导出设置</p>',12),d=s("p",null,"新建一个右键新建一个Ravenscrpit文件，把这个文件拖入组件内的source，Behaviour处填写TXT的文件名：",-1),m=s("p",null,"{缺图}",-1),v=s("p",null,"{缺图}",-1),b=s("h2",{id:"_1-1-完成主要功能",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-1-完成主要功能","aria-hidden":"true"},"#"),n(" 1.1 完成主要功能")],-1),f={href:"http://ravenfieldgame.com/ravenscript/api.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.runoob.com/csharp/csharp-class.html",target:"_blank",rel:"noopener noreferrer"},h={href:"http://ravenfieldgame.com/ravenscript/api/Player.html",target:"_blank",rel:"noopener noreferrer"},w={href:"http://ravenfieldgame.com/ravenscript/api/Actor.html",target:"_blank",rel:"noopener noreferrer"},g=e(`<p>官方并没有标注这些内容，这需要您按照逻辑思维与常识自行探索</p><p>其次你需要明白如何为脚本对应找到合适的Api:</p><p>提取功能中的关键字，如“载具” &gt; Vehicle</p><p>然后到文档的Api索引查找相关方法、member，如我们可以在Player这个类中找到可以获取玩家活动载具的menber是Player.Actor.activeVehicle，我们就可以在</p><p>如果找不到合适的方法，可以尝试关键词搜索，如果还找不到。那就是乌鸦没写估计，只能另辟蹊径</p><p>然后按文档提供的member和method编写脚本，不断重复这个行为</p><p>首先，我们先实现我们最<strong>核心</strong>的功能血量回复</p><p>通过Input.GetKeyDown的return判断按键是否按下这个是基本操作，各个Unity基础教程应该有介绍</p><p>血量回复这个功能对应的API的话，先把这个功能拆出一个词“Health”（健康），在文档里搜索</p><p>在Actor这个类里找到Actor.ResupplyHealth(float health)这个方法似乎有用</p><p>那类Actor是什么？</p><p>类Actor是一个管理玩家与Bot在游戏中的“属性”的一个重要的类，包括但不限于血量、所使用的武器载具、所属小队等属性</p><p>同时我们又发现Player.actor这个API可以让我们获取到玩家的Actor</p><p>那么，所需的方法都有了！</p><p>示例：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">behaviour</span><span class="token punctuation">(</span><span class="token string">&quot;QuickTreat&quot;</span><span class="token punctuation">)</span>  <span class="token comment">--注册Ravenscript行为，然后我们才能从这个基类派生自己的自定义类</span>

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>P<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token comment">--当按下P键时...，通过Input.GetKeyDown的return判断按键是否按下，基本操作hhh</span>
        Player<span class="token punctuation">.</span>actor<span class="token punctuation">.</span><span class="token function">ResupplyHealth</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">--调用Player的成员actor内的一个成员方法来回复50血量</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后选中带MutatorCotentMod的Prefab，在顶栏的RFTools选项卡点击Test Cotent Mod or map在游戏测试mutator</p>`,17),_={href:"https://blog.csdn.net/x3464/article/details/105137284",target:"_blank",rel:"noopener noreferrer"},q=e(`<p>实际测试，发现没有Bug，同时发现使用Player.actor.ResupplyHealth()这个方法可以确保防止血量回复后健康超过最大值，这意味着我们可以减少实现这个功能的代码量</p><p>然后继续添加下一个功能冷却时间：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">behaviour</span><span class="token punctuation">(</span><span class="token string">&quot;QuickTreat&quot;</span><span class="token punctuation">)</span>

<span class="token comment">--初始化局部变量,无法从脚本外部访问</span>
<span class="token keyword">local</span> timer <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">--计时器</span>

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">--这个Start()函数会在游戏的一开始运行</span>
    <span class="token comment">--在调用的变量前加一个self.防止得到的的值是nil</span>
    self<span class="token punctuation">.</span>timer <span class="token operator">=</span> Time<span class="token punctuation">.</span>time <span class="token operator">+</span> <span class="token number">60</span>  <span class="token comment">--初始化计时器，计算超出冷却时间后时的游戏时间，选用这个方案的原因是Time.deltaTime似乎无法正常使用</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--这个Update()函数会在游戏的每帧运行</span>
    <span class="token keyword">if</span> Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">.</span>P<span class="token punctuation">)</span> <span class="token keyword">then</span>
	    <span class="token keyword">if</span> Time<span class="token punctuation">.</span>time <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>timer <span class="token keyword">then</span>
            Player<span class="token punctuation">.</span>actor<span class="token punctuation">.</span><span class="token function">ResupplyHealth</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
			self<span class="token punctuation">.</span>timer <span class="token operator">=</span> Time<span class="token punctuation">.</span>time <span class="token operator">+</span> <span class="token number">60</span>  <span class="token comment">--重置计时器</span>
		<span class="token keyword">end</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后实际测试，发现没有Bug，然后继续添加下一个功能，不断重复这个过程，直到完成：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">behaviour</span><span class="token punctuation">(</span><span class="token string">&quot;QuickTreat&quot;</span>

<span class="token keyword">local</span> timer <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">local</span> cooldown  <span class="token comment">--冷却时间</span>
<span class="token keyword">local</span> ratio <span class="token comment">--血量回复比</span>
<span class="token keyword">local</span> keybind <span class="token comment">--触发键位</span>
<span class="token keyword">local</span> mutator

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--进入游戏地图的一开始时运行</span>
    coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token function">WaitForSeconds</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">--延迟运行下一行确保mutator设置加载成功</span>
    self<span class="token punctuation">.</span>mutator <span class="token operator">=</span> self<span class="token punctuation">.</span>script<span class="token punctuation">.</span>mutator  <span class="token comment">--获取此脚本绑定的mutator信息</span>
	self<span class="token punctuation">.</span>cooldown <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span><span class="token function">GetConfigurationFloat</span><span class="token punctuation">(</span><span class="token string">&quot;cooldown&quot;</span><span class="token punctuation">)</span>  <span class="token comment">--获取mutator自定义选项卡中id为cooldown的float对应的值</span>
	<span class="token keyword">if</span> self<span class="token punctuation">.</span>cooldown <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token keyword">then</span>  <span class="token comment">--如果cooldown小于60，则重置cooldown为60</span>
	    self<span class="token punctuation">.</span>cooldown <span class="token operator">=</span> <span class="token number">60</span>
    <span class="token keyword">end</span>
	self<span class="token punctuation">.</span>ratio <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span><span class="token function">GetConfigurationRange</span><span class="token punctuation">(</span><span class="token string">&quot;ratio&quot;</span><span class="token punctuation">)</span>  <span class="token comment">--获取mutator自定义选项卡中id为ratio的range对应的值</span>
	self<span class="token punctuation">.</span>keybind <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span><span class="token function">GetConfigurationString</span><span class="token punctuation">(</span><span class="token string">&quot;keybind&quot;</span><span class="token punctuation">)</span>  <span class="token comment">--获取mutator自定义选项卡中id为keybind的string对应的值</span>
	<span class="token keyword">if</span> self<span class="token punctuation">.</span>keybind <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  <span class="token comment">--如果keybind为空，则重置keybind为&quot;p&quot;</span>
	    self<span class="token punctuation">.</span>keybind <span class="token operator">=</span> <span class="token string">&quot;P&quot;</span>
    <span class="token keyword">end</span>
	self<span class="token punctuation">.</span>timer <span class="token operator">=</span> Time<span class="token punctuation">.</span>time <span class="token operator">+</span> self<span class="token punctuation">.</span>cooldown  <span class="token comment">--计算超出冷却时间后的游戏时间</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>keybind<span class="token punctuation">)</span> <span class="token keyword">then</span>  <span class="token comment">--当按下keybind对应的按键时...</span>
		<span class="token keyword">if</span> Time<span class="token punctuation">.</span>time <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>timer <span class="token keyword">then</span>
            Player<span class="token punctuation">.</span>actor<span class="token punctuation">.</span><span class="token function">ResupplyHealth</span><span class="token punctuation">(</span>Player<span class="token punctuation">.</span>actor<span class="token punctuation">.</span>maxHealth <span class="token operator">*</span> self<span class="token punctuation">.</span>ratio<span class="token punctuation">)</span>
			self<span class="token punctuation">.</span>timer <span class="token operator">=</span> Time<span class="token punctuation">.</span>time <span class="token operator">+</span> self<span class="token punctuation">.</span>cooldown
			Overlay<span class="token punctuation">.</span><span class="token function">ShowMessage</span><span class="token punctuation">(</span><span class="token string">&quot;[QuickTreat]Sucess&quot;</span><span class="token punctuation">,</span><span class="token number">0.15</span><span class="token punctuation">)</span>  <span class="token comment">--调用Overlay.ShowMessage()来显示一行信息，后半部分的数值是消失延迟</span>
        <span class="token keyword">else</span>
            Overlay<span class="token punctuation">.</span><span class="token function">ShowMessage</span><span class="token punctuation">(</span><span class="token string">&quot;[QuickTreat]Failure,Need delay&quot;</span><span class="token punctuation">,</span><span class="token number">0.15</span><span class="token punctuation">)</span>
		<span class="token keyword">end</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当主要功能完成时，我们就可以继续下一步：添加次要功能</p><h2 id="_1-2-添加次要功能" tabindex="-1"><a class="header-anchor" href="#_1-2-添加次要功能" aria-hidden="true">#</a> 1.2 添加次要功能</h2><p>现在添加我们的次要功能UI操作</p>`,8),C={href:"https://docs.unity.cn/cn/current/Manual/UICanvas.html",target:"_blank",rel:"noopener noreferrer"},T=e(`<p>首先在场景内的Mutator添加一个Canvas，在Canvas内添加Scroll View，在Scroll View内添加Button和Text：</p><p>{缺图}</p><p>然后自行修改UI物体的大小位置以及文字，注意禁用Canvas物体放置一开游戏就显示Canvas：</p><p>{缺图}</p><p>将canvas添加进我们前面ScriptedBehaviour组件内的target，方便调用：</p><p>{缺图}</p><p>在MutatorCotentMod内添加一个Bool选项卡，让我们可以自定义UI的开启：</p><p>{缺图}</p><p>现在回到代码编辑器</p><p>按照文档提供的api编写脚本：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">behaviour</span><span class="token punctuation">(</span><span class="token string">&quot;QuickTreat&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">local</span> timer <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">local</span> cooldown
<span class="token keyword">local</span> ratio
<span class="token keyword">local</span> keybind
<span class="token keyword">local</span> mutator
<span class="token keyword">local</span> enableUI <span class="token operator">=</span> <span class="token keyword">false</span>  <span class="token comment">--是否启用UI，默认为false</span>
<span class="token keyword">local</span> button  <span class="token comment">--canvas内的按键</span>
<span class="token keyword">local</span> text  <span class="token comment">--canvas内的Text物体</span>

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token function">WaitForSeconds</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>mutator <span class="token operator">=</span> self<span class="token punctuation">.</span>script<span class="token punctuation">.</span>mutator
	self<span class="token punctuation">.</span>cooldown <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span><span class="token function">GetConfigurationFloat</span><span class="token punctuation">(</span><span class="token string">&quot;cooldown&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> self<span class="token punctuation">.</span>cooldown <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token keyword">then</span>
	    self<span class="token punctuation">.</span>cooldown <span class="token operator">=</span> <span class="token number">60</span>
    <span class="token keyword">end</span>
	self<span class="token punctuation">.</span>ratio <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span><span class="token function">GetConfigurationRange</span><span class="token punctuation">(</span><span class="token string">&quot;ratio&quot;</span><span class="token punctuation">)</span>
	self<span class="token punctuation">.</span>keybind <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span><span class="token function">GetConfigurationString</span><span class="token punctuation">(</span><span class="token string">&quot;keybind&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> self<span class="token punctuation">.</span>keybind <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
	    self<span class="token punctuation">.</span>keybind <span class="token operator">=</span> <span class="token string">&quot;P&quot;</span>
    <span class="token keyword">end</span>
	<span class="token keyword">if</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span><span class="token function">GetConfigurationBool</span><span class="token punctuation">(</span><span class="token string">&quot;enableUI&quot;</span><span class="token punctuation">)</span> !<span class="token operator">=</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
	    self<span class="token punctuation">.</span>enableUI <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span><span class="token function">GetConfigurationBool</span><span class="token punctuation">(</span><span class="token string">&quot;enableUI&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">end</span>
	self<span class="token punctuation">.</span>button <span class="token operator">=</span> self<span class="token punctuation">.</span>targets<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">GetComponentInChildren</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span>  <span class="token comment">--获取Button组件</span>
    self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">AddListener</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">&quot;onClick&quot;</span><span class="token punctuation">)</span>  <span class="token comment">--添加一个监听事件，self是指在触发事件时要使用的事件函数所在脚本，“onClick”是指在触发事件时要调用的方法名，也就是下面的QuickTreat:onClick()</span>
	self<span class="token punctuation">.</span>text <span class="token operator">=</span> self<span class="token punctuation">.</span>targets<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">GetComponentInChildren</span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span>  <span class="token comment">--获取Text组件（可能会获取到button的Text组件，届时请自行修改代码lol）</span>
    self<span class="token punctuation">.</span>timer <span class="token operator">=</span> Time<span class="token punctuation">.</span>time <span class="token operator">+</span> self<span class="token punctuation">.</span>cooldown
<span class="token keyword">end</span>

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> Input<span class="token punctuation">.</span><span class="token function">GetKeyDown</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>keybind<span class="token punctuation">)</span> <span class="token keyword">then</span>
	    <span class="token keyword">if</span> self<span class="token punctuation">.</span>enableUI <span class="token operator">==</span> <span class="token keyword">true</span> <span class="token keyword">then</span>  <span class="token comment">--如果启用UI,就设置Canvas为活动</span>
            self<span class="token punctuation">.</span>targets<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token keyword">not</span> self<span class="token punctuation">.</span>targets<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>activeSelf<span class="token punctuation">)</span>
			<span class="token keyword">if</span> self<span class="token punctuation">.</span>targets<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>activeSelf <span class="token operator">==</span> <span class="token keyword">true</span> <span class="token keyword">then</span>  <span class="token comment">--如果Canvas处于活动状态，就将鼠标从游戏操作解锁，否则锁定鼠标</span>
			    Screen<span class="token punctuation">.</span><span class="token function">UnlockCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">else</span>
			    Screen<span class="token punctuation">.</span><span class="token function">LockCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">end</span>
        <span class="token keyword">else</span>
		    <span class="token keyword">if</span> Time<span class="token punctuation">.</span>time <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>timer <span class="token keyword">then</span>
                Player<span class="token punctuation">.</span>actor<span class="token punctuation">.</span><span class="token function">ResupplyHealth</span><span class="token punctuation">(</span>Player<span class="token punctuation">.</span>actor<span class="token punctuation">.</span>maxHealth <span class="token operator">*</span> self<span class="token punctuation">.</span>ratio<span class="token punctuation">)</span>
			    self<span class="token punctuation">.</span>timer <span class="token operator">=</span> Time<span class="token punctuation">.</span>time <span class="token operator">+</span> self<span class="token punctuation">.</span>cooldown
				Overlay<span class="token punctuation">.</span><span class="token function">ShowMessage</span><span class="token punctuation">(</span><span class="token string">&quot;[QuickTreat]Sucess&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span>
                Overlay<span class="token punctuation">.</span><span class="token function">ShowMessage</span><span class="token punctuation">(</span><span class="token string">&quot;[QuickTreat]Failure,Need delay&quot;</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span>
			<span class="token keyword">end</span>
        <span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> QuickTreat<span class="token punctuation">:</span><span class="token function">OnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">--点击Button时的事件函数</span>
    <span class="token keyword">if</span> Time<span class="token punctuation">.</span>time <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>timer <span class="token keyword">then</span>
        Player<span class="token punctuation">.</span>actor<span class="token punctuation">.</span><span class="token function">ResupplyHealth</span><span class="token punctuation">(</span>Player<span class="token punctuation">.</span>actor<span class="token punctuation">.</span>maxHealth <span class="token operator">*</span> self<span class="token punctuation">.</span>ratio<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>timer <span class="token operator">=</span> Time<span class="token punctuation">.</span>time <span class="token operator">+</span> self<span class="token punctuation">.</span>cooldown
		self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&quot;Sucess&quot;</span>  <span class="token comment">--如果ResupplyHealth了，就将text物体的text属性改为目标文本</span>
	<span class="token keyword">else</span>
	    self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&quot;Failure,Need delay&quot;</span><span class="token operator">..</span><span class="token function">tostring</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>timer <span class="token operator">-</span> Time<span class="token punctuation">.</span>time<span class="token punctuation">)</span>  <span class="token comment">--如果没过冷却了，就将text物体的text属性改为目标文本</span>
    <span class="token keyword">end</span> 
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试，没bug，我们就可以进行最后一步了</p><h2 id="_1-3-优化代码" tabindex="-1"><a class="header-anchor" href="#_1-3-优化代码" aria-hidden="true">#</a> 1.3 优化代码</h2><p>这一步可以选择性跳过，但我们建议你执行</p><p>这一过程主要表现为：减少不必要的判断、运算，精简代码，将可以迁移到事件函数的判断迁移之类</p><p>此步不再赘述</p><h2 id="_3-0-测试与导出" tabindex="-1"><a class="header-anchor" href="#_3-0-测试与导出" aria-hidden="true">#</a> 3.0 测试与导出</h2>`,17);function x(M,S){const p=c("RouterLink"),t=c("ExternalLinkIcon");return i(),u("div",null,[k,s("p",null,[n("场景内新建一个空物体，添加"),a(p,{to:"/cn/Components/ScriptedBehaviour.html"},{default:o(()=>[n("ScriptedBehaviour")]),_:1}),n("组件")]),d,m,s("p",null,[n("预制件化这个物体（游戏中这个物体下的所有东西都会被实例化，包括UI之类的物体），在"),a(p,{to:"/cn/Components/MutatorCotentMod.html"},{default:o(()=>[n("MutatorCotentMod")]),_:1}),n("配置这个Mutator，此处在config这里配置了float、range、string各一个：")]),v,b,s("p",null,[n("打开官方的"),s("a",f,[n("Ravenscrpit的文档"),a(t)])]),s("p",null,[n("首先你需要明白文档中那些classes（其实classes这个名称并不准确？）可以"),s("a",y,[n("“直接调用”"),a(t)])]),s("p",null,[n("即哪些类已经实例化可以直接作为api对象进行调用（如"),s("a",h,[n("Player"),a(t)]),n(",它可以直接在脚本里Player.actor.health =9999这样直接调用 ），哪些是作为“数据类型”，需要先实例化这个类才能使用（如"),s("a",w,[n("类Actor"),a(t)]),n("，它需要先在一个Bot的GameObject上通过GetComponentInParent<Actor>，“get”了这个类才能使用 ）")]),g,s("p",null,[n("操作过程不再赘述，参考"),s("a",_,[n("CSDN"),a(t)])]),q,s("p",null,[n("各类"),s("a",C,[n("UI组件的应用"),a(t)]),n("不再赘述")]),T,s("p",null,[n("参考"),a(p,{to:"/cn/Components/MutatorCotentMod.html"},{default:o(()=>[n("MutatorCotentMod")]),_:1})])])}const U=l(r,[["render",x],["__file","rvs.2.html.vue"]]);export{U as default};
